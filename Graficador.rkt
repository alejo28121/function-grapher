#lang racket
(require graphics/graphics)
(open-graphics)
(define (Main)
    (define win (open-viewport "Gr√°fica" 625 625))
    (define (ReadFuntion)
        (printf "Por favor ingrese la funcion racional a graficar: ")
        (define value (read))
        (if (equal? (~a (string-ref value 0)) "X")
            (string-append "+" value)
            value
        )
    )
    (struct elements (coefficient potency))
    (struct points  (coordinateX coordinateY))
    (define funtion (ReadFuntion))
    (printf "Por favor ingrese el rango:\n")
    (printf "Inicio del rango: ")
    (define initRange (read))
    (printf "Fin del rango: ")
    (define endRange (read))
    (printf "Ingrese el incremento entre puntos: ")
    (define increment (read))
    (define (Graphic table)
        (define tableDate table)
        (define (SearchElements counter prePos tab)
            (define (SearchExpt count preCount)
                (if (equal? (~a (string-ref funtion count)) "(")
                    (SearchExpt (+ count 2) (+ count 1))
                    (if (< count (string-length funtion))
                        (if (and (= count preCount) (or (equal? (~a (string-ref funtion count)) "+") (equal? (~a (string-ref funtion count)) "X") (equal? (~a (string-ref funtion count)) "-")))
                            1
                            (if (or (equal? (~a (string-ref funtion count)) "+") (equal? (~a (string-ref funtion count)) ")") (equal? (~a (string-ref funtion count)) "X") (equal? (~a (string-ref funtion count)) "-"))
                                (substring funtion preCount count)
                                (SearchExpt (+ count 1) preCount)
                            )
                        )
                        (void)
                    )
                )
            )   
            (define (ShowTable count)
                (if (< count (vector-length tab))
                    (begin
                        (printf "~a, ~a\n" (elements-coefficient (vector-ref tab count)) (elements-potency (vector-ref tab count)))
                        (ShowTable (+ count 1))
                    )
                    (CalculatePoints tab (vector) initRange)
                )
            )
            (if (< counter (string-length funtion)) 
                (if (and (> counter prePos) (or (equal? (~a (string-ref funtion counter)) "+") (equal? (~a (string-ref funtion counter)) "X") (equal? (~a (string-ref funtion counter)) "-")))
                    (if (or (equal? (~a (string-ref funtion (- counter 1))) "+") (equal? (~a (string-ref funtion (- counter 1))) "-"))
                        (if (equal? (SearchExpt (+ 1 counter) (+ 1 counter)) "1")
                            (SearchElements (+ 1 counter) (+ 1 counter) (vector-append tab (vector (elements (string->number (string-append (~a (string-ref funtion (- counter 1))) "1")) (SearchExpt (+ 1 counter) (+ 1 counter))))))
                            (SearchElements (+ (+ 1 (string-length (~a (SearchExpt (+ 1 counter) (+ 1 counter))))) counter) (+ (+ 1 (string-length (SearchExpt (+ 1 counter) (+ 1 counter)))) counter) (vector-append tab (vector (elements (string->number "1") (string->number (SearchExpt (+ 1 counter) (+ 1 counter)))))))
                        )
                        (if (equal? (~a (string-ref funtion counter)) "X")
                            (if (equal? (SearchExpt (+ 1 counter) (+ 1 counter)) "1")
                                (SearchElements (+ 1 counter) (+ 1 counter) (vector-append tab (vector (elements (string->number (substring funtion prePos counter)) (string->number (SearchExpt (+ 1 counter) (+ 1 counter)))))))
                                (SearchElements (+ (+ 1 (string-length (SearchExpt (+ 1 counter) (+ 1 counter)))) counter) (+ (+ 1 (string-length (SearchExpt (+ 1 counter) (+ 1 counter)))) counter) (vector-append tab (vector (elements (string->number (substring funtion prePos counter)) (string->number (SearchExpt (+ 1 counter) (+ 1 counter)))))))
                            )
                            (SearchElements counter counter (vector-append tab (vector (elements (string->number (substring funtion prePos counter)) 0))))
                        )
                    )
                    (if (< counter (- (string-length funtion) 1))
                        (if (equal? (~a (string-ref funtion (+ counter 1))) ")")
                            (SearchElements (+ counter 2) (+ counter 2) tab)
                            (SearchElements (+ counter 1) prePos tab)
                        )
                        (SearchElements (+ 1 counter) counter (vector-append tab (vector (elements (string->number (substring funtion prePos)) 0))))
                    )
                )
                (ShowTable 0)
            )
        )
        (SearchElements 0 0 tableDate)
    )
    (define (CalculatePoints tableElements table counterX)
        (define (CalculateY counter preValue)
            (if (< counter (vector-length tableElements))
                (if (positive? (elements-coefficient (vector-ref tableElements counter)))
                    (if (and (= counterX 0) (negative? (elements-potency (vector-ref tableElements counter))))
                        #f
                        (CalculateY (+ counter 1) (+ preValue (* (elements-coefficient (vector-ref tableElements counter)) (expt counterX (elements-potency (vector-ref tableElements counter))))))
                    )
                    (if (and (= counterX 0) (negative? (elements-potency (vector-ref tableElements counter))))
                        #f
                        (CalculateY (+ counter 1) (- preValue (* (elements-coefficient (vector-ref tableElements counter)) (expt counterX (elements-potency (vector-ref tableElements counter))))))
                    )
                )
                preValue
            )
        )
        (define (SearchMinimum counter low)
            (if (< counter (vector-length table))
                (if (< (points-coordinateY (vector-ref table counter)) low)
                    (SearchMinimum (+ counter 1) (points-coordinateY (vector-ref table counter)))
                    (SearchMinimum (+ counter 1) low)
                ) 
                low
            )
        )
        (define (SearchMax counter max)
            (if (< counter (vector-length table))
                (if (< max (points-coordinateY (vector-ref table counter)))
                    (SearchMax (+ counter 1) (points-coordinateY (vector-ref table counter)))
                    (SearchMax (+ counter 1) max)
                ) 
                max
            )
        )
        (define (Escalade counter tableEscalade minRangeY totalRangeY minRangeX totalRangeX)
            (define minimunY (SearchMinimum 0 (points-coordinateY (vector-ref table 0))))
            (define maxY (SearchMax 0 (points-coordinateY (vector-ref table 0))))
            (define numeratorY (* totalRangeY (- (points-coordinateY (vector-ref table counter)) minimunY)))
            (define denominatorY (- maxY minimunY))
            (define valueY (+ minRangeY (/ numeratorY denominatorY)))
            (define valueX (+ minRangeX (/ (* (- (points-coordinateX (vector-ref table counter)) (points-coordinateX (vector-ref table 0))) totalRangeX) (- (points-coordinateX (vector-ref table (- (vector-length table) 1))) (points-coordinateX (vector-ref table 0))))))
            (printf "~a|~a\n" valueX valueY)
            (if (< counter (- (vector-length table) 1))
                (Escalade (+ counter 1) (vector-append tableEscalade (vector (points valueX valueY))) minRangeY totalRangeY minRangeX totalRangeX)
                tableEscalade
            )
        )
        (define (ShowTable count)
            (define minimunY (SearchMinimum 0 (points-coordinateY (vector-ref table 0))))
            (define maxY (SearchMax 0 (points-coordinateY (vector-ref table 0))))
            (define minimumX (points-coordinateX (vector-ref table 0)))
            (define maxX (points-coordinateX (vector-ref table (- (vector-length table) 1))))
            (if (< count (vector-length table))
                (begin
                    (printf "~a, ~a\n" (points-coordinateX (vector-ref table count)) (points-coordinateY (vector-ref table count)))
                    (ShowTable (+ count 1))
                )
                (GraficPoints (Escalade 0 (vector) 100 425 100 425) 0 table)
            )
        )
        (define valueAdd (CalculateY 0 0))
        (if (equal? valueAdd #f)
            (CalculatePoints tableElements table (+ counterX increment))
            (if (<= counterX (+ increment endRange))
                (CalculatePoints tableElements (vector-append table (vector (points counterX valueAdd))) (+ counterX increment))
                (ShowTable 0)
            )
        )
    )
    (define (GraficPoints dates index table)
        (if (< index (vector-length dates))
            (begin
                ;((draw-string win) (make-posn valueX (- 625 valueY)) "X" "red")
                ((draw-ellipse win) (make-posn (floor (points-coordinateX (vector-ref dates index))) (- 625 (floor (points-coordinateY (vector-ref dates index))))) 6 6 "blue")
                (if (= (points-coordinateX (vector-ref table index)) 0)
                    (begin
                        ((draw-line win) (make-posn (floor (points-coordinateX (vector-ref dates index))) 100) (make-posn (floor (points-coordinateX (vector-ref dates index))) 525) "black")
                        ((draw-line win) (make-posn 100 (- 625 (floor (points-coordinateY (vector-ref dates index))))) (make-posn 525 (- 625 (floor (points-coordinateY (vector-ref dates index))))) "black")
                    )
                    (void)
                )
                (GraficPoints dates (+ index 1) table)
            )
            (void)
        )
    )
    (Graphic (vector))
)
(Main)