#lang racket
(require graphics/graphics)
(open-graphics)
#|
- Fecha de publicación: 7/05/2025
- Versión de su código: 1
- Autor. Ing(c) Alejandro Grajales Vargas
- Nombre del lenguaje utilizado: Racket
- Versión del lenguaje utilizado: 8.16
- Presentado a: Doctor Ricardo Moreno Laverde
- Universidad Tecnológica de Pereira
- Programa de Ingeniería de Sistemas y Computación
|#
(define (Main number)
    (define win (open-viewport "Gráfica" 625 625))
    ((draw-string win) (make-posn 20 20) (string-append "Grafica numero: "(~a number)) "black")
    (define (ReadFuntion)
        (printf "Por favor ingrese la funcion racional a graficar: ")
        (define value (read))
        (if (equal? (~a (string-ref value 0)) "X")
            (string-append "+" value)
            value
        )
    )
    (struct elements (coefficient potency))
    (struct points  (coordinateX coordinateY))
    (define funtion (ReadFuntion))
    (printf "Por favor ingrese el rango:\n")
    (printf "Inicio del rango: ")
    (define initRange (read))
    (printf "Fin del rango: ")
    (define endRange (read))
    (printf "Ingrese el incremento entre puntos: ")
    (define increment (read))
    (define (Graphic table)
        (define tableDate table)
        (define (SearchElements counter prePos tab)
            (define (SearchExpt count preCount)
                (if (< count (string-length funtion))
                    (if (equal? (~a (string-ref funtion count)) "(")
                        (SearchExpt (+ count 2) (+ count 1))
                        (if (< count (string-length funtion))
                            (if (and (= count preCount) (or (equal? (~a (string-ref funtion count)) "+") (equal? (~a (string-ref funtion count)) "X") (equal? (~a (string-ref funtion count)) "-")))
                                "1"
                                (if (or (equal? (~a (string-ref funtion count)) "+") (equal? (~a (string-ref funtion count)) ")") (equal? (~a (string-ref funtion count)) "X") (equal? (~a (string-ref funtion count)) "-"))
                                    (substring funtion preCount count)
                                    (SearchExpt (+ count 1) preCount)
                                )
                            )
                            (void)
                        )
                    )
                    (if (equal? (~a (string-ref funtion (- count 1))) "X")
                        "1"
                        (substring funtion preCount count)
                    )
                )
            )   
            (define (ShowTable count)
                (define len (vector-length tab))
                (if (= count 0)
                    (begin
                        (printf "+------------+----------+\n")
                        (printf "| Coeficiente | Potencia |\n")
                        (printf "+------------+----------+\n")
                        (ShowTable (+ count 1))
                    )
                    (if (<= count len)
                        (begin
                            (printf "|     ~a      |    ~a     |\n"
                                    (elements-coefficient (vector-ref tab (- count 1)))
                                    (elements-potency (vector-ref tab (- count 1)))
                            )
                            (ShowTable (+ count 1))
                        )
                        (begin
                            (printf "+------------+----------+\n")
                            (CalculatePoints tab (vector) initRange)
                        )
                    )
                )
            )
            (if (< counter (string-length funtion)) 
                (if (and (> counter prePos) (or (equal? (~a (string-ref funtion counter)) "+") (equal? (~a (string-ref funtion counter)) "X") (equal? (~a (string-ref funtion counter)) "-")))
                    (if (or (equal? (~a (string-ref funtion (- counter 1))) "+") (equal? (~a (string-ref funtion (- counter 1))) "-"))
                        (if (equal? (SearchExpt (+ 1 counter) (+ 1 counter)) "1")
                            (SearchElements (+ 1 counter) (+ 1 counter) (vector-append tab (vector (elements (string->number (string-append (~a (string-ref funtion (- counter 1))) "1")) (string->number (SearchExpt (+ 1 counter) (+ 1 counter)))))))
                            (SearchElements (+ (+ 1 (string-length (~a (SearchExpt (+ 1 counter) (+ 1 counter))))) counter) (+ (+ 1 (string-length (SearchExpt (+ 1 counter) (+ 1 counter)))) counter) (vector-append tab (vector (elements 1 (string->number (SearchExpt (+ 1 counter) (+ 1 counter)))))))
                        )
                        (if (equal? (~a (string-ref funtion counter)) "X")
                            (if (equal? (SearchExpt (+ 1 counter) (+ 1 counter)) "1")
                                (SearchElements (+ 1 counter) (+ 1 counter) (vector-append tab (vector (elements (string->number (substring funtion prePos counter)) (string->number (SearchExpt (+ 1 counter) (+ 1 counter)))))))
                                (SearchElements (+ (+ 1 (string-length (SearchExpt (+ 1 counter) (+ 1 counter)))) counter) (+ (+ 1 (string-length (SearchExpt (+ 1 counter) (+ 1 counter)))) counter) (vector-append tab (vector (elements (string->number (substring funtion prePos counter)) (string->number (SearchExpt (+ 1 counter) (+ 1 counter)))))))
                            )
                            (SearchElements counter counter (vector-append tab (vector (elements (string->number (substring funtion prePos counter)) 0))))
                        )
                    )
                    (if (< counter (- (string-length funtion) 1))
                        (if (equal? (~a (string-ref funtion (+ counter 1))) ")")
                            (SearchElements (+ counter 2) (+ counter 2) tab)
                            (SearchElements (+ counter 1) prePos tab)
                        )
                        (SearchElements (+ 1 counter) counter (vector-append tab (vector (elements (string->number (substring funtion prePos)) 0))))
                    )
                )
                
                (ShowTable 0)
            )
        )
        (SearchElements 0 0 tableDate)
    )
    (define (CalculatePoints tableElements table counterX)
        (define (CalculateY counter preValue)
            (if (< counter (vector-length tableElements))
                (if (positive? (elements-coefficient (vector-ref tableElements counter)))
                    (if (and (= counterX 0) (negative? (elements-potency (vector-ref tableElements counter))))
                        #f
                        (CalculateY (+ counter 1) (+ preValue (* (elements-coefficient (vector-ref tableElements counter)) (expt counterX (elements-potency (vector-ref tableElements counter))))))
                    )
                    (if (and (= counterX 0) (negative? (elements-potency (vector-ref tableElements counter))))
                        #f
                        (CalculateY (+ counter 1) (- preValue (* (elements-coefficient (vector-ref tableElements counter)) (expt counterX (elements-potency (vector-ref tableElements counter))))))
                    )
                )
                preValue
            )
        )
        (define (SearchMinimum counter low)
            (if (< counter (vector-length table))
                (if (< (points-coordinateY (vector-ref table counter)) low)
                    (SearchMinimum (+ counter 1) (points-coordinateY (vector-ref table counter)))
                    (SearchMinimum (+ counter 1) low)
                ) 
                low
            )
        )
        (define (SearchMax counter max)
            (if (< counter (vector-length table))
                (if (< max (points-coordinateY (vector-ref table counter)))
                    (SearchMax (+ counter 1) (points-coordinateY (vector-ref table counter)))
                    (SearchMax (+ counter 1) max)
                ) 
                max
            )
        )
        (define (Escalade counter tableEscalade minRangeY totalRangeY minRangeX totalRangeX)
            (define minimunY (SearchMinimum 0 (points-coordinateY (vector-ref table 0))))
            (define maxY (SearchMax 0 (points-coordinateY (vector-ref table 0))))
            (define numeratorY (* totalRangeY (- (points-coordinateY (vector-ref table counter)) minimunY)))
            (define denominatorY (- maxY minimunY))
            (define valueY (+ minRangeY (/ numeratorY denominatorY)))
            (define valueX (+ minRangeX (/ (* (- (points-coordinateX (vector-ref table counter)) (points-coordinateX (vector-ref table 0))) totalRangeX) (- (points-coordinateX (vector-ref table (- (vector-length table) 1))) (points-coordinateX (vector-ref table 0))))))
            (if (< counter (- (vector-length table) 1))
                (Escalade (+ counter 1) (vector-append tableEscalade (vector (points valueX valueY))) minRangeY totalRangeY minRangeX totalRangeX)
                tableEscalade
            )
        )
        (define (ShowTable count)
            (define minimunY (SearchMinimum 0 (points-coordinateY (vector-ref table 0))))
            (define maxY (SearchMax 0 (points-coordinateY (vector-ref table 0))))
            (define minimumX (points-coordinateX (vector-ref table 0)))
            (define maxX (points-coordinateX (vector-ref table (- (vector-length table) 1))))
            (define len (vector-length table))
            (if (= count 0)
                (begin
                    (printf "+-------------------+-----------------+\n")
                    (printf "|          X        |        Y        |\n")
                    (printf "+-------------------+-----------------+\n")
                    (ShowTable (+ count 1))
                )
                (if (<= count len)
                    (begin
                        (printf "|     ~a             |           ~a     |\n"
                                (points-coordinateX (vector-ref table (- count 1)))
                                (points-coordinateY (vector-ref table (- count 1)))
                        )
                        (ShowTable (+ count 1))
                    )
                    (begin
                        (printf "+------------+----------+\n")
                        (GraficPoints (Escalade 0 (vector) 200 225 200 225) 0 table)
                    )
                )
            )
        )
        (define valueAdd (CalculateY 0 0))
        (if (equal? valueAdd #f)
            (CalculatePoints tableElements table (+ counterX increment))
            (if (<= counterX (+ increment endRange))
                (CalculatePoints tableElements (vector-append table (vector (points counterX valueAdd))) (+ counterX increment))
                (ShowTable 0)
            )
        )
    )
    (define (GraficPoints dates index table)
        (define (SearchMinimum counter low value)
            (if (< counter (vector-length value))
                (if (< (points-coordinateY (vector-ref value counter)) low)
                    (SearchMinimum (+ counter 1) (points-coordinateY (vector-ref value counter)) value)
                    (SearchMinimum (+ counter 1) low value)
                ) 
                low
            )
        )
        (define (SearchMinimumX counter low value)
            (if (< counter (vector-length value))
                (if (< (points-coordinateX (vector-ref value counter)) low)
                    (SearchMinimumX (+ counter 1) (points-coordinateX (vector-ref value counter)) value)
                    (SearchMinimumX (+ counter 1) low value)
                ) 
                low
            )
        )
        (define (SearchMax counter max value)
            (if (< counter (vector-length value))
                (if (< max (points-coordinateY (vector-ref value counter)))
                    (SearchMax (+ counter 1) (points-coordinateY (vector-ref value counter)) value)
                    (SearchMax (+ counter 1) max value)
                ) 
                max
            )
        ) 
        (define minimunY (SearchMinimum 0 (points-coordinateY (vector-ref table 0)) table))
        (define maxY (SearchMax 0 (points-coordinateY (vector-ref table 0)) table))
        (define numeratorY (* 225 (- 0 minimunY)))
        (define denominatorY (- maxY minimunY))
        (define valueY (+ 200 (/ numeratorY denominatorY)))
        (define valueX (+ 200 (/ (* (- 0 (points-coordinateX (vector-ref table 0))) 225) (- (points-coordinateX (vector-ref table (- (vector-length table) 1))) (points-coordinateX (vector-ref table 0))))))
        (define (DrawNumbers counter countTwo posX posY)
            (if (<= counter (vector-length dates))
                (if (<= (vector-length dates) 20)
                    (begin
                        ((draw-string win) (make-posn posX posY) (~a (points-coordinateX (vector-ref table counter))) "black")
                        ((draw-line win) (make-posn (+ 2 posX) (- posY 20)) (make-posn (+ 2 posX) (- posY 15)) "black")
                        (if (= counter (vector-length dates))
                            (DrawNumbers (+ counter 2) (+ countTwo 1) posX posY)
                            (DrawNumbers (+ counter 2) (+ countTwo 1) (+ posX (floor (- (points-coordinateX (vector-ref dates (+ 2 countTwo))) (points-coordinateX (vector-ref dates countTwo))))) posY)
                        )
                    )
                    (begin
                        ((draw-string win) (make-posn posX posY) (~a (points-coordinateX (vector-ref table counter))) "black")
                        ((draw-line win) (make-posn (+ 2 posX) (- posY 20)) (make-posn (+ 2 posX) (- posY 15)) "black")
                        (if (= counter (vector-length dates))
                            (DrawNumbers (+ counter (ceiling (/ (vector-length dates) 10))) (+ countTwo 1) posX posY)
                            (DrawNumbers (+ counter (ceiling (/ (vector-length dates) 10))) (+ countTwo 1) (+ posX (floor (- (points-coordinateX (vector-ref dates (+ (ceiling (/ (vector-length dates) 10)) countTwo))) (points-coordinateX (vector-ref dates countTwo))))) posY)
                        )
                    )
                )
                (DrawNumbersY (- 625 (floor valueY)) (- 625 (floor (SearchMax 0 (points-coordinateY (vector-ref dates 0)) dates))) (- 625 (floor (SearchMinimum 0 (points-coordinateY (vector-ref dates 0)) dates))))
            )
        )
        (define (DrawNumbersY posX posY posYmin)
            ((draw-string win) (make-posn (- posX 104) (+ 3 posY)) (~a (points-coordinateY (vector-ref table (- (vector-length dates) 1)))) "black")
            ((draw-line win) (make-posn (- posX 32) posY) (make-posn (- posX 28) posY) "black")
            ((draw-string win) (make-posn (- posX 104) (+ 3 posYmin)) (~a (points-coordinateY (vector-ref table 0))) "black")
            ((draw-line win) (make-posn (- posX 32) posYmin) (make-posn (- posX 28) posYmin) "black")
            (NewFuntion)
        )
        (if (< index (vector-length dates))
            (begin
                ((draw-string win) (make-posn (floor (points-coordinateX (vector-ref dates index))) (- 625 (floor (points-coordinateY (vector-ref dates index))))) "x" "blue")
                ;((draw-ellipse win) (make-posn (floor (points-coordinateX (vector-ref dates index))) (- 625 (floor (points-coordinateY (vector-ref dates index))))) 6 6 "blue")                
                (if (> valueY (SearchMinimum 0 (points-coordinateY (vector-ref dates 0)) dates))
                    ((draw-line win) (make-posn (floor valueX) 100) (make-posn valueX (+ 100 (- 625 (floor (SearchMinimum 0 (points-coordinateY (vector-ref dates 0)) dates))))) "black")
                    ((draw-line win) (make-posn (floor valueX) 100) (make-posn valueX (- 625 (floor valueY))) "black")
                )
                ((draw-line win) (make-posn 100 (- 625 (floor valueY))) (make-posn 525 (- 625 (floor valueY))) "black")
                (GraficPoints dates (+ index 1) table)
            )
            (DrawNumbers 0 0 (SearchMinimumX 0 (points-coordinateX (vector-ref dates 0)) dates) (+ 20 (- 625 (floor valueY))))
        )
    )
    (define (NewFuntion)
        (printf "Para ingresar una nueva funcion ingrese un 0 o un 1 para finalizar: ")
        (define input (read))
        (if (= input 0)
            (begin
                (close-viewport win)
                (Main (+ 1 number))
            )
            (close-viewport win)
        )
    )
    (Graphic (vector))
)
(Main 1)